{"version":3,"file":"static/js/20.35285527.chunk.js","mappings":"2RAEaA,EAAYC,EAAAA,GAAAA,IAAH,gDAITC,EAAUD,EAAAA,GAAAA,IAAH,6GAOPE,EAAWF,EAAAA,GAAAA,GAAH,sF,SCkBrB,EAzBsB,SAAC,GAAc,IAC3BG,EAD0B,EAAXC,KACCC,KAAKD,KAC3B,OACI,SAACL,EAAD,WACQ,wBACKI,EAASG,KAAI,gBAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,aAAcC,EAAjC,EAAiCA,GAAjC,OACV,UAACR,EAAD,WACKO,GACG,SAACR,EAAD,CAASU,IAAG,UAVvB,mCAUuB,OAAoBF,GAAgBG,IAAKL,KAErD,SAACN,EAAD,CAASU,IAAKE,EAAKD,IAAKL,KAE5B,uBAAIA,KACJ,uCAAeC,OAPJE,EADL,OAcjC,E,UCyBD,EA5CkB,WAEd,OAAwBI,EAAAA,EAAAA,UAAS,MAAjC,eAAOV,EAAP,KAAaW,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QA4BR,OAzBAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAc,mCAAG,uFAEfH,EAFe,wDAMnBD,GAAa,GANM,mBASIK,EAAAA,EAAAA,IAAa,CAAEJ,QAAAA,IATnB,OASTf,EATS,OAUfU,EAAQV,GAVO,kDAafY,EAAS,EAAD,IAbO,yBAgBfE,GAAa,GAhBE,6EAAH,qDAoBpBI,GAEH,GAAE,CAACH,KAGA,gCACKhB,IAAQ,SAAC,EAAD,CAAeA,KAAMA,IAC7Bc,IAAa,SAACO,EAAA,EAAD,IACbT,IAAS,qDAIrB,C,+EC9CYU,E,QAAe1B,GAAAA,IAAH,0E,SCczB,EAbe,WACX,OACI,SAAC0B,EAAD,WACA,SAAC,KAAD,CACIC,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,MAAM,WAIjB,C,2MCZKC,EAAW,+BACXC,EAAM,mCAECC,EAAuB,mCAAG,oGACZC,IAAAA,IAAA,UAAaH,EAAb,uCAAoDC,IADxC,cAC7BG,EAD6B,yBAE5BA,GAF4B,2CAAH,qDAKvBC,EAAoB,mCAAG,wGAASC,MAAAA,OAAT,MAAiB,GAAjB,MAAqBC,KAAAA,OAArB,MAA4B,EAA5B,WACTJ,IAAAA,IAAA,UAAaH,EAAb,iCAA8CC,EAA9C,gCAAyEM,EAAzE,sCAA2GD,IADlG,cAC1BF,EAD0B,yBAEzBA,GAFyB,2CAAH,sDAMpBI,EAAgB,mCAAG,8FAASnB,EAAT,EAASA,QAAT,SACLc,IAAAA,IAAA,UAAaH,EAAb,kBAA+BX,EAA/B,oBAAkDY,EAAlD,oBADK,cACtBG,EADsB,yBAErBA,GAFqB,2CAAH,sDAMhBX,EAAY,mCAAG,8FAASJ,EAAT,EAASA,QAAT,SACDc,IAAAA,IAAA,UAAaH,EAAb,kBAA+BX,EAA/B,4BAA0DY,IADzD,cAClBG,EADkB,yBAEjBA,GAFiB,2CAAH,sDAKZK,EAAe,mCAAG,8FAASpB,EAAT,EAASA,QAAT,SACJc,IAAAA,IAAA,UAAaH,EAAb,kBAA+BX,EAA/B,4BAA0DY,EAA1D,2BADI,cACrBG,EADqB,yBAEpBA,GAFoB,2CAAH,qD","sources":["components/CastMovie/CastMovieInfo/CastMovieInfoStyled.js","components/CastMovie/CastMovieInfo/CastMovieInfo.jsx","components/CastMovie/CastMovie.jsx","components/Loader/LoaderStyled.js","components/Loader/Loader.jsx","services/getSearchMovies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n    padding-top: 20px;\n`\n\nexport const CastImg = styled.img`\n    display: block;\n    width: 150px;\n    height: auto;\n    margin-bottom: 10px;\n`\n\nexport const CastItem = styled.li`\n    :not(:last-child) {\n        margin-bottom: 15px;\n    }\n`","import PropTypes from 'prop-types';\nimport img from '../../img/imageNotFound.png';\nimport { CastImg, CastItem, Container } from './CastMovieInfoStyled';\n\nconst IMG_BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst CastMovieInfo = ({ cast }) => {\n    const castInfo = cast.data.cast;\n    return (\n        <Container>\n                <ul>\n                    {castInfo.map(({name, character, profile_path, id}) => (\n                        <CastItem key={id}>\n                            {profile_path ? \n                                <CastImg src={`${IMG_BASE_URL}${profile_path}`} alt={name}/> \n                                : \n                                <CastImg src={img} alt={name}/>\n                            }\n                            <p>{name}</p>\n                            <p>Character: {character}</p>\n                        </CastItem>\n                    ))}\n                </ul>\n        </Container>\n    )\n}\n\nCastMovieInfo.propTypes = {\n    cast: PropTypes.object.isRequired,\n}\n\nexport default CastMovieInfo;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Loader from \"components/Loader/Loader\";\nimport CastMovieInfo from './CastMovieInfo/CastMovieInfo';\nimport { getCastMovie } from 'services/getSearchMovies';\n\nconst CastMovie = () => {\n    \n    const [cast, setCast] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const { movieId } = useParams();\n\n\n    useEffect(()=> {\n        const fetchCastMovie = async () => {\n\n            if(!movieId) {\n                return;\n            }\n\n            setIsLoading(true);\n            \n            try {\n                const data = await getCastMovie({ movieId });\n                setCast(data);\n            } \n            catch (error) {\n                setError(error);\n            }\n            finally {\n                setIsLoading(false);\n            }\n        }\n\n        fetchCastMovie();\n\n    }, [movieId]);\n\n    return (\n        <>\n            {cast && <CastMovieInfo cast={cast}/>}\n            {isLoading && <Loader/>}\n            {error && <p>Please try again later!</p>}\n        </>\n    )\n\n}\n\nexport default CastMovie;","import styled from 'styled-components';\n\nexport const LoaderStyled = styled.div`\n    display: flex;\n    justify-content: center;\n`","import { Vortex } from  'react-loader-spinner';\nimport { LoaderStyled } from './LoaderStyled';\n\nconst Loader = () => {\n    return (    \n        <LoaderStyled>\n        <Vortex \n            visible={true} \n            height=\"100\" \n            width=\"100\"\n            color='black'\n        />\n        </LoaderStyled>\n    )\n}\n\nexport default Loader;","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = 'f17c8764406c58be1dc553dcf8d1d1db';\n\nexport const getSearchTrendingMovies = async () => {\n    const response = await axios.get(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n    return response;\n}\n\nexport const getSearchQueryMovies = async ({ query = '', page = 1}) => {\n    const response = await axios.get(`${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&page=${page}&include_adult=false&query=${query}`)\n    return response;\n    \n}\n\nexport const getMoviesDetails = async ({ movieId }) => {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${KEY}&language=en-US`)\n    return response;\n}\n\n\nexport const getCastMovie = async ({ movieId }) => {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`)\n    return response;\n}\n\nexport const getReviewsMovie = async ({ movieId }) => {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`)\n    return response;\n}"],"names":["Container","styled","CastImg","CastItem","castInfo","cast","data","map","name","character","profile_path","id","src","alt","img","useState","setCast","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","fetchCastMovie","getCastMovie","Loader","LoaderStyled","visible","height","width","color","BASE_URL","KEY","getSearchTrendingMovies","axios","response","getSearchQueryMovies","query","page","getMoviesDetails","getReviewsMovie"],"sourceRoot":""}